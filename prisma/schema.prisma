datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?    @unique
  imageUrl   String?
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @updatedAt @map(name: "updated_at")
  posts      Post[]
  role       Role       @default(USER)
  books      Book[]
  categories String[]
  slug       String?    @unique
  Bookcase   Bookcase[]

  @@map(name: "users")
}

enum Role {
  USER
  ADMIN
}

model Bookcase {
  id         String       @id @default(cuid())
  categories Categories[]
  decoration Int          @default(0)
  books      Book[]
  User       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
}

model Categories {
  id         String    @id @default(cuid())
  title      String    @default("Current")
  bookend    String    @default("default")
  Bookcase   Bookcase? @relation(fields: [bookcaseId], references: [id], onDelete: Cascade)
  bookcaseId String?
  books      Book[]
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  alignment  String    @default("left")
  orderIndex Int       @unique @default(autoincrement())
  // orderIndex Int       @unique // ordering of the category sections in db

  @@unique([bookcaseId, title]) // category for each bookcase must have unique titles
}

model Book {
  id                  String      @id @default(cuid())
  // data from google books api
  title               String
  authors             String[]
  imageLinks          Json[]
  volumeLink          String?
  pageCount           Int?
  industryIdentifiers Json[]
  description         String?
  subtitle            String?
  height              Float       @default(70)
  width               Float       @default(20)
  // relations
  User                User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?
  Bookcase            Bookcase?   @relation(fields: [bookcaseId], references: [id], onDelete: Cascade)
  bookcaseId          String?
  Category            Categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          String?
  // user input
  hidden              Boolean     @default(false)
  sections            String[]
  orderIndex          Int         @default(0)
  rating              Float       @default(0)
  userContent         String      @default("")
  status              Int         @default(0)
  // meta
  color               String[]
  createdAt           DateTime    @default(now()) @map(name: "created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map(name: "updated_at")
}
